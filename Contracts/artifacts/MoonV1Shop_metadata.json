{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "int24",
						"name": "tickLower",
						"type": "int24"
					},
					{
						"indexed": true,
						"internalType": "int24",
						"name": "tickUpper",
						"type": "int24"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "amount",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Burn",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "int24",
						"name": "tickLower",
						"type": "int24"
					},
					{
						"indexed": true,
						"internalType": "int24",
						"name": "tickUpper",
						"type": "int24"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "amount0",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "amount1",
						"type": "uint128"
					}
				],
				"name": "Collect",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "amount0",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "amount1",
						"type": "uint128"
					}
				],
				"name": "CollectProtocol",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "paid0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "paid1",
						"type": "uint256"
					}
				],
				"name": "Flash",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "observationCardinalityNextOld",
						"type": "uint16"
					},
					{
						"indexed": false,
						"internalType": "uint16",
						"name": "observationCardinalityNextNew",
						"type": "uint16"
					}
				],
				"name": "IncreaseObservationCardinalityNext",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "sqrtPriceX96",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "int24",
						"name": "tick",
						"type": "int24"
					}
				],
				"name": "Initialize",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "owner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "int24",
						"name": "tickLower",
						"type": "int24"
					},
					{
						"indexed": true,
						"internalType": "int24",
						"name": "tickUpper",
						"type": "int24"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "amount",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"name": "Mint",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "feeProtocol0Old",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "feeProtocol1Old",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "feeProtocol0New",
						"type": "uint8"
					},
					{
						"indexed": false,
						"internalType": "uint8",
						"name": "feeProtocol1New",
						"type": "uint8"
					}
				],
				"name": "SetFeeProtocol",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "sender",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amount0",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "int256",
						"name": "amount1",
						"type": "int256"
					},
					{
						"indexed": false,
						"internalType": "uint160",
						"name": "sqrtPriceX96",
						"type": "uint160"
					},
					{
						"indexed": false,
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"indexed": false,
						"internalType": "int24",
						"name": "tick",
						"type": "int24"
					}
				],
				"name": "Swap",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "int24",
						"name": "_unitLower",
						"type": "int24"
					},
					{
						"internalType": "int24",
						"name": "_unitUpper",
						"type": "int24"
					},
					{
						"internalType": "uint128",
						"name": "amount",
						"type": "uint128"
					}
				],
				"name": "burn",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "coin",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "int24",
						"name": "_unitLower",
						"type": "int24"
					},
					{
						"internalType": "int24",
						"name": "_unitUpper",
						"type": "int24"
					},
					{
						"internalType": "uint128",
						"name": "amount0Requested",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "amount1Requested",
						"type": "uint128"
					}
				],
				"name": "collect",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "amount0",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "amount1",
						"type": "uint128"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "collectProtocol",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "coinamount",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "thingamount",
						"type": "uint128"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "gateraddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "amount0",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "amount1",
						"type": "uint256"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "flash",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "gatelock",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "gater",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint16",
						"name": "lookerCardinalityNext",
						"type": "uint16"
					}
				],
				"name": "increaseLookerCardinalityNext",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint160",
						"name": "sqrtPriceX96",
						"type": "uint160"
					}
				],
				"name": "initialize",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "investion",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lockShopbyGetor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "lockShopbyMarketor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "market",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "marketlock",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "maxInvestionPerUnit",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "int24",
						"name": "_unitLower",
						"type": "int24"
					},
					{
						"internalType": "int24",
						"name": "_unitUpper",
						"type": "int24"
					},
					{
						"internalType": "uint128",
						"name": "amount",
						"type": "uint128"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "mint",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "coinamount",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "thingamount",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint32[]",
						"name": "secondsAgos",
						"type": "uint32[]"
					}
				],
				"name": "observe",
				"outputs": [
					{
						"internalType": "int56[]",
						"name": "unitCumulatives",
						"type": "int56[]"
					},
					{
						"internalType": "uint160[]",
						"name": "secondsPerinvestionCumulativeX128s",
						"type": "uint160[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"name": "priceLogers",
				"outputs": [
					{
						"internalType": "uint32",
						"name": "blockTimestamp",
						"type": "uint32"
					},
					{
						"internalType": "int56",
						"name": "unitCumulative",
						"type": "int56"
					},
					{
						"internalType": "uint160",
						"name": "secondsPerInvestionCumulativeX128",
						"type": "uint160"
					},
					{
						"internalType": "bool",
						"name": "initialized",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "profit",
				"outputs": [
					{
						"internalType": "uint24",
						"name": "",
						"type": "uint24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "profitGrowthGlobalCoinX128",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "profitGrowthGlobalThingX128",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "profitshares",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "marketshare",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "gatershare",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "commandershare",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "usershare",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "",
						"type": "bytes32"
					}
				],
				"name": "proofs",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "liquidity",
						"type": "uint128"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside0LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthInside1LastX128",
						"type": "uint256"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed0",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "tokensOwed1",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "protocolProfits",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "coin",
						"type": "uint128"
					},
					{
						"internalType": "uint128",
						"name": "thing",
						"type": "uint128"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "scope",
				"outputs": [
					{
						"internalType": "uint8",
						"name": "",
						"type": "uint8"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "_marketshare",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_gatershare",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_commandershare",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "_usershare",
						"type": "uint8"
					}
				],
				"name": "setFeeProfitSharesbyMarketor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint8",
						"name": "profitProtocol0",
						"type": "uint8"
					},
					{
						"internalType": "uint8",
						"name": "profitProtocol1",
						"type": "uint8"
					}
				],
				"name": "setFeeProtocolbyMarketor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int24",
						"name": "_unitLower",
						"type": "int24"
					},
					{
						"internalType": "int24",
						"name": "_unitUpper",
						"type": "int24"
					}
				],
				"name": "snapshotCumulativesInside",
				"outputs": [
					{
						"internalType": "int56",
						"name": "unitCumulativeInside",
						"type": "int56"
					},
					{
						"internalType": "uint160",
						"name": "secondsPerinvestionInsideX128",
						"type": "uint160"
					},
					{
						"internalType": "uint32",
						"name": "secondsInside",
						"type": "uint32"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "state0",
				"outputs": [
					{
						"internalType": "uint160",
						"name": "sqrtPriceX96",
						"type": "uint160"
					},
					{
						"internalType": "int24",
						"name": "unit",
						"type": "int24"
					},
					{
						"internalType": "uint16",
						"name": "lookerIndex",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "lookerCardinality",
						"type": "uint16"
					},
					{
						"internalType": "uint16",
						"name": "lookerCardinalityNext",
						"type": "uint16"
					},
					{
						"internalType": "uint8",
						"name": "profitProtocol",
						"type": "uint8"
					},
					{
						"internalType": "bool",
						"name": "unlocked",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "recipient",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "gateraddress",
						"type": "address"
					},
					{
						"internalType": "bool",
						"name": "zeroForOne",
						"type": "bool"
					},
					{
						"internalType": "int256",
						"name": "amountSpecified",
						"type": "int256"
					},
					{
						"internalType": "uint160",
						"name": "sqrtPriceLimitX96",
						"type": "uint160"
					},
					{
						"internalType": "bytes",
						"name": "data",
						"type": "bytes"
					}
				],
				"name": "swap",
				"outputs": [
					{
						"internalType": "int256",
						"name": "amount0",
						"type": "int256"
					},
					{
						"internalType": "int256",
						"name": "amount1",
						"type": "int256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "thing",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int16",
						"name": "",
						"type": "int16"
					}
				],
				"name": "unitBitmap",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unitSpacing",
				"outputs": [
					{
						"internalType": "int24",
						"name": "",
						"type": "int24"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "int24",
						"name": "",
						"type": "int24"
					}
				],
				"name": "units",
				"outputs": [
					{
						"internalType": "uint128",
						"name": "liquidityGross",
						"type": "uint128"
					},
					{
						"internalType": "int128",
						"name": "liquidityNet",
						"type": "int128"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthOutside0X128",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "feeGrowthOutside1X128",
						"type": "uint256"
					},
					{
						"internalType": "int56",
						"name": "unitCumulativeOutside",
						"type": "int56"
					},
					{
						"internalType": "uint160",
						"name": "secondsPerLiquidityOutsideX128",
						"type": "uint160"
					},
					{
						"internalType": "uint32",
						"name": "secondsOutside",
						"type": "uint32"
					},
					{
						"internalType": "bool",
						"name": "initialized",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlockShopbyGetor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "unlockShopbyMarketor",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"burn(int24,int24,uint128)": {
					"details": "noDelegateCall is applied indirectly via _modifyproof"
				},
				"collectProtocol()": {
					"returns": {
						"coinamount": "The protocol fee collected in token0",
						"thingamount": "The protocol fee collected in token1"
					}
				},
				"flash(address,address,uint256,uint256,bytes)": {
					"details": "The caller of this method receives a callback in the form of IUniswapV3FlashCallback#uniswapV3FlashCallbackCan be used to donate underlying tokens pro-rata to currently in-range liquidity providers by calling with 0 amount{0,1} and sending the donation amount(s) from the callback",
					"params": {
						"amount0": "The amount of token0 to send",
						"amount1": "The amount of token1 to send",
						"data": "Any data to be passed through to the callback",
						"gateraddress": "The address where the flash occured",
						"recipient": "The address which will receive the token0 and token1 amounts"
					}
				},
				"increaseLookerCardinalityNext(uint16)": {
					"details": "This method is no-op if the pool already has an observationCardinalityNext greater than or equal to the input observationCardinalityNext.",
					"params": {
						"lookerCardinalityNext": "The desired minimum number of observations for the pool to store"
					}
				},
				"initialize(uint160)": {
					"details": "Price is represented as a sqrt(amountToken1/amountToken0) Q64.96 value",
					"params": {
						"sqrtPriceX96": "the initial sqrt price of the pool as a Q64.96"
					}
				},
				"observe(uint32[])": {
					"details": "To get a time weighted average tick or liquidity-in-range, you must call this with two values, one representing the beginning of the period and another for the end of the period. E.g., to get the last hour time-weighted average tick, you must call it with secondsAgos = [3600, 0].The time weighted average tick represents the geometric time weighted average price of the pool, in log base sqrt(1.0001) of token1 / token0. The TickMath library can be used to go from a tick value to a ratio.",
					"params": {
						"secondsAgos": "From how long ago each cumulative tick and liquidity value should be returned"
					},
					"returns": {
						"secondsPerinvestionCumulativeX128s": "Cumulative seconds per liquidity-in-range value as of each `secondsAgos` from the current block timestamp",
						"unitCumulatives": "Cumulative tick values as of each `secondsAgos` from the current block timestamp"
					}
				},
				"setFeeProtocolbyMarketor(uint8,uint8)": {
					"params": {
						"profitProtocol0": "new protocol fee for token0 of the pool",
						"profitProtocol1": "new protocol fee for token1 of the pool"
					}
				},
				"swap(address,address,bool,int256,uint160,bytes)": {
					"details": "The caller of this method receives a callback in the form of IUniswapV3SwapCallback#uniswapV3SwapCallback",
					"params": {
						"amountSpecified": "The amount of the swap, which implicitly configures the swap as exact input (positive), or exact output (negative)",
						"data": "Any data to be passed through to the callback",
						"recipient": "The address to receive the output of the swap",
						"sqrtPriceLimitX96": "The Q64.96 sqrt price limit. If zero for one, the price cannot be less than this value after the swap. If one for zero, the price cannot be greater than this value after the swap",
						"zeroForOne": "The direction of the swap, true for token0 to token1, false for token1 to token0"
					},
					"returns": {
						"amount0": "The delta of the balance of token0 of the pool, exact when negative, minimum when positive",
						"amount1": "The delta of the balance of token1 of the pool, exact when negative, minimum when positive"
					}
				}
			},
			"stateVariables": {
				"coin": {
					"return": "The token contract address",
					"returns": {
						"_0": "The token contract address"
					}
				},
				"investion": {
					"details": "This value has no relationship to the total liquidity across all ticks function liquidity() external view returns (uint128);"
				},
				"market": {
					"return": "The contract address",
					"returns": {
						"_0": "The contract address"
					}
				},
				"maxInvestionPerUnit": {
					"details": "This parameter is enforced per tick to prevent liquidity from overflowing a uint128 at any point, and also prevents out-of-range liquidity from being used to prevent adding in-range liquidity to a pool",
					"return": "The max amount of liquidity per tick",
					"returns": {
						"_0": "The max amount of liquidity per tick"
					}
				},
				"priceLogers": {
					"details": "You most likely want to use #observe() instead of this method to get an observation as of some amount of time ago, rather than at a specific index in the array.",
					"params": {
						"index": "The element of the observations array to fetch"
					},
					"return": "blockTimestamp The timestamp of the observation, Returns unitCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerInvestionCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use",
					"returns": {
						"blockTimestamp": "The timestamp of the observation, Returns unitCumulative the tick multiplied by seconds elapsed for the life of the pool as of the observation timestamp, Returns secondsPerInvestionCumulativeX128 the seconds per in range liquidity for the life of the pool as of the observation timestamp, Returns initialized whether the observation has been initialized and the values are safe to use"
					}
				},
				"profit": {
					"return": "The fee",
					"returns": {
						"_0": "The fee"
					}
				},
				"profitGrowthGlobalCoinX128": {
					"details": "This value can overflow the uint256"
				},
				"profitGrowthGlobalThingX128": {
					"details": "This value can overflow the uint256"
				},
				"proofs": {
					"params": {
						"key": "The position's key is a hash of a preimage composed by the owner, tickLower and tickUpper"
					},
					"return": "liquidity The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke",
					"returns": {
						"liquidity": "The amount of liquidity in the position, Returns feeGrowthInside0LastX128 fee growth of token0 inside the tick range as of the last mint/burn/poke, Returns feeGrowthInside1LastX128 fee growth of token1 inside the tick range as of the last mint/burn/poke, Returns tokensOwed0 the computed amount of token0 owed to the position as of the last mint/burn/poke, Returns tokensOwed1 the computed amount of token1 owed to the position as of the last mint/burn/poke"
					}
				},
				"protocolProfits": {
					"details": "Protocol fees will never exceed uint128 max in either token"
				},
				"state0": {
					"return": "sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy",
					"returns": {
						"sqrtPriceX96": "The current price of the pool as a sqrt(token1/token0) Q64.96 value tick The current tick of the pool, i.e. according to the last tick transition that was run. This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick boundary. observationIndex The index of the last oracle observation that was written, observationCardinality The current maximum number of observations stored in the pool, observationCardinalityNext The next maximum number of observations, to be updated when the observation. feeProtocol The protocol fee for both tokens of the pool. Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0 is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee. unlocked Whether the pool is currently locked to reentrancy"
					}
				},
				"thing": {
					"return": "The token contract address",
					"returns": {
						"_0": "The token contract address"
					}
				},
				"unitSpacing": {
					"details": "Ticks can only be used at multiples of this value, minimum of 1 and always positive e.g.: a tickSpacing of 3 means ticks can be initialized every 3rd tick, i.e., ..., -6, -3, 0, 3, 6, ... This value is an int24 to avoid casting even though it is always positive.",
					"return": "The tick spacing",
					"returns": {
						"_0": "The tick spacing"
					}
				},
				"units": {
					"params": {
						"unit": "The unit to look up"
					},
					"return": "liquidityGross the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position.",
					"returns": {
						"liquidityGross": "the total amount of position liquidity that uses the pool either as tick lower or tick upper, liquidityNet how much liquidity changes when the pool price crosses the tick, feeGrowthOutside0X128 the fee growth on the other side of the tick from the current tick in token0, feeGrowthOutside1X128 the fee growth on the other side of the tick from the current tick in token1, tickCumulativeOutside the cumulative tick value on the other side of the tick from the current tick secondsPerLiquidityOutsideX128 the seconds spent per liquidity on the other side of the tick from the current tick, secondsOutside the seconds spent on the other side of the tick from the current tick, initialized Set to true if the tick is initialized, i.e. liquidityGross is greater than 0, otherwise equal to false. Outside values can only be used if the tick is initialized, i.e. if liquidityGross is greater than 0. In addition, these values are only relative and must be used only in comparison to previous snapshots for a specific position."
					}
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"Burn(address,int24,int24,uint128,uint256,uint256)": {
					"notice": "Emitted when a position's liquidity is removed"
				},
				"Collect(address,address,int24,int24,uint128,uint128)": {
					"notice": "Emitted when fees are collected by the owner of a position"
				},
				"CollectProtocol(address,address,uint128,uint128)": {
					"notice": "Emitted when the collected protocol fees are withdrawn by the factory owner"
				},
				"Flash(address,address,uint256,uint256,uint256,uint256)": {
					"notice": "Emitted by the pool for any flashes of token0/token1"
				},
				"IncreaseObservationCardinalityNext(uint16,uint16)": {
					"notice": "Emitted by the pool for increases to the number of observations that can be stored"
				},
				"Initialize(uint160,int24)": {
					"notice": "Emitted exactly once by a pool when #initialize is first called on the pool"
				},
				"Mint(address,address,int24,int24,uint128,uint256,uint256)": {
					"notice": "Emitted when liquidity is minted for a given position"
				},
				"SetFeeProtocol(uint8,uint8,uint8,uint8)": {
					"notice": "Emitted when the protocol fee is changed by the pool"
				},
				"Swap(address,address,int256,int256,uint160,uint128,int24)": {
					"notice": "Emitted by the pool for any swaps between token0 and token1"
				}
			},
			"kind": "user",
			"methods": {
				"coin()": {
					"notice": "The first of the two tokens of the pool, sorted by address"
				},
				"collectProtocol()": {
					"notice": "Collect the protocol fee accrued to the pool"
				},
				"flash(address,address,uint256,uint256,bytes)": {
					"notice": "Receive token0 and/or token1 and pay it back, plus a fee, in the callback"
				},
				"increaseLookerCardinalityNext(uint16)": {
					"notice": "Increase the maximum number of price and liquidity observations that this pool will store"
				},
				"initialize(uint160)": {
					"notice": "Sets the initial price for the pool"
				},
				"investion()": {
					"notice": "The currently in range liquidity available to the pool"
				},
				"market()": {
					"notice": "The contract that deployed the pool, which must adhere to the IUniswapV3Factory interface"
				},
				"maxInvestionPerUnit()": {
					"notice": "The maximum amount of position liquidity that can use any tick in the range"
				},
				"observe(uint32[])": {
					"notice": "Returns the cumulative tick and liquidity as of each timestamp `secondsAgo` from the current block timestamp"
				},
				"priceLogers(uint256)": {
					"notice": "Returns data about a specific observation index"
				},
				"profit()": {
					"notice": "The pool's fee in hundredths of a bip, i.e. 1e-6"
				},
				"profitGrowthGlobalCoinX128()": {
					"notice": "The fee growth as a Q128.128 fees of token0 collected per unit of liquidity for the entire life of the pool"
				},
				"profitGrowthGlobalThingX128()": {
					"notice": "The fee growth as a Q128.128 fees of token1 collected per unit of liquidity for the entire life of the pool"
				},
				"proofs(bytes32)": {
					"notice": "Returns the information about a position by the position's key"
				},
				"protocolProfits()": {
					"notice": "The amounts of token0 and token1 that are owed to the protocol"
				},
				"setFeeProtocolbyMarketor(uint8,uint8)": {
					"notice": "Set the denominator of the protocol's % share of the fees"
				},
				"state0()": {
					"notice": "The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas when accessed externally."
				},
				"swap(address,address,bool,int256,uint160,bytes)": {
					"notice": "Swap token0 for token1, or token1 for token0"
				},
				"thing()": {
					"notice": "The second of the two tokens of the pool, sorted by address"
				},
				"unitBitmap(int16)": {
					"notice": "Returns 256 packed tick initialized boolean values. See TickBitmap for more information"
				},
				"unitSpacing()": {
					"notice": "The pool tick spacing"
				},
				"units(int24)": {
					"notice": "Look up information about a specific tick in the pool"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"Contracts/MoonV1Shop.sol": "MoonV1Shop"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"Contracts/Interfaces/IMoonV1Shop.sol": {
			"keccak256": "0x1e733296f1abc423c4937ca51def848abc76b20e2b033f0dfe67b6bb7005075d",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://f8c32069e883c3a5608346b5d5e3adea1f4dc81d70358980350b65409b821dc1",
				"dweb:/ipfs/QmYbVvP3Kb6LUbuY9vwG8x47ARa9auLceEGFbK45J17PhP"
			]
		},
		"Contracts/Interfaces/shop/IMoonV1ShopActions.sol": {
			"keccak256": "0xcb1fdb723b01fa1b63a667f70904c4a31bac3ef68a2b349db20fd5532838389e",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b69188b4b9962ac6e2317b721fe7e0e1c96adee3321d94a535cff99e9df7435c",
				"dweb:/ipfs/QmRi4RZUSA3d8NyMc1fJfBXV5pdgvkfi8hpVfKHkJD8qRM"
			]
		},
		"Contracts/Interfaces/shop/IMoonV1ShopDerivedState.sol": {
			"keccak256": "0xa25b56c0124d0c7509371fd6e960891eefd83095572bf9ba2c57153829e28815",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8ceae54986f0c476c0bee4d1042d4a95247812c59b7c946e216c3e4ac5502416",
				"dweb:/ipfs/QmbsMcuebVtekJTG2JE1jsGtPMxKjJynE68oKzpyAmG7Uh"
			]
		},
		"Contracts/Interfaces/shop/IMoonV1ShopEvents.sol": {
			"keccak256": "0x7e5bdcd8b8813760420b89d27bbae2b0130da82d70b11dc7353ba98c123b03ae",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://3f2475827445c6cf8dfac5a2acd39ce6e4a33facc59e89dbb959fd1fe467b318",
				"dweb:/ipfs/QmQUfFzVpPD66XMAHF41HcnjUKr9zxvrNimXdx5xGUJFkK"
			]
		},
		"Contracts/Interfaces/shop/IMoonV1ShopImmutables.sol": {
			"keccak256": "0xa2093c6777d055b7598cc8aa3a3a9e4bfda97087db9d0f5fd1928ffb6aa953cd",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a3fe4971590dce8cde652c45ab4b50516c054e80446990a2b3309b1e1cf9535d",
				"dweb:/ipfs/QmRQsGFkYiomrHBuJAs3bcutcE9dkKzK9peQSauas3Ck6U"
			]
		},
		"Contracts/Interfaces/shop/IMoonV1ShopOwnerActions.sol": {
			"keccak256": "0x876408d27ae6332c7bb981f378f6664f7d5d2173ce58d37fc5433fe5e408639f",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://5950f71cd8b26edc293dcdaca7301bed339f20a94a6ee5ced8fd91868273615c",
				"dweb:/ipfs/QmVfpR6fGxPYo3AadSjo5NfuKrhv8t8jSVRFywYkNEQjDL"
			]
		},
		"Contracts/Interfaces/shop/IMoonV1ShopState.sol": {
			"keccak256": "0x04c623e839ac94e7d081975f3bdba895c4e22156bf5fbf1495a0b223a3ec41a3",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://b62528607d0d6f95eb77b7209f5d825904072bac7bbc8dc803a9d2f5d15f922b",
				"dweb:/ipfs/QmW5uxDtf4soVKFidZ9mQ9uHJCaLLpNK7mKEVUs5m6utxM"
			]
		},
		"Contracts/MoonV1Shop.sol": {
			"keccak256": "0x5ee948847043b85673f614fd594d59daf363b792329c5f086d1323b93b8a852c",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://39784c7e2023c849fcd1fe5a15a79745ce44886626ad457619d2328a19047eb5",
				"dweb:/ipfs/Qmf3EM8LDWrAbto2jkE8cPWTWQzj7uVv6LVz64gmjCAyJi"
			]
		},
		"Contracts/NoDelegateCall.sol": {
			"keccak256": "0x2ab29a2d0765c68425e211acb66687eb1955b77396fc051bb0a0f6ea5786d6b1",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://2c2ed438b9a3b74f0b38adc33085e1383861eb4948f3501327fb4e72a778bb94",
				"dweb:/ipfs/Qmf6WNNJSP69fJWGbSQvA6GPdvyJFSP6oTfLbwiiAJ1zKj"
			]
		},
		"Contracts/interfaces/IERC20Minimal.sol": {
			"keccak256": "0xd92f37e7fabdb065efa9b0fab3fed533d92bf8ea1ea489b18ede0e9b3b3b2bd0",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://daeed40f194a531e55c37cd8b1647aa1b7d3f38461680e58136146337e12d791",
				"dweb:/ipfs/Qmdm4dzMxM2qqSeFBVEVY2Br8sdr5uGXqb9Sf1d78cb7Gv"
			]
		},
		"Contracts/interfaces/IMoonV1Market.sol": {
			"keccak256": "0x4024d8efd5e066f192d13f4d65a4966e7f16b2c064dd1368d821bbcf032cb613",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://58828ceec8ee2621d6a48753f239f2c2e120b6e3c0e26355c2d7b6bcdebd726c",
				"dweb:/ipfs/QmVY4ZU5Sq3CUhBw7PWwmcsVcnu9CMSdHewXs1E1SSZF8R"
			]
		},
		"Contracts/interfaces/IMoonV1MarketShopCreate.sol": {
			"keccak256": "0xb21fc9f63fc571ec4b702831527937ac91f78a4cf5391a91a11dac9fc703655e",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://1576f1720328ffc3b246980aaff310cd833fb327195969e7408d0fb4f9fbbd2c",
				"dweb:/ipfs/QmYXxr4HFHjm5vxfpV4gLA6kjh1CjYiQyYCPCGgnPAjgG8"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketCreatorActions.sol": {
			"keccak256": "0x37e42eed7853091d7e6c09052a42cb8fc19ca7ef63093c26fee38544e6bec92b",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://bc65b4c883f84e009f627022fd34bd444e2c363c0c5e950acc0426a908b15250",
				"dweb:/ipfs/QmNjtyyf7nHUUabUna4ADiMcNJa8YBExJTUcbgx3MbmQsZ"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketDerivedState.sol": {
			"keccak256": "0xcb5732dd4e699b777ce45ba3debbd24d31a8b7a0b27e8719c008a92b331eb811",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://add8afc984ca767624a4333fb36dd3771bda7c27d3c6f5484555499e3a50f3d6",
				"dweb:/ipfs/QmSYamdrcE2kHrJEvvHuwf5hCM5gztNU4KtuskR8VjhjUB"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketEvents.sol": {
			"keccak256": "0x35ed18a1921b05863bed707c4b92529d7f00a7655e3cd1f7a231bd00f9224caa",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://798633b37e01165e3370a1cbebdb43ef1fc4a915a469aa743b09f02dcba1ce34",
				"dweb:/ipfs/QmRAk6dBAaRCn1SpfQZ5QfCB7bZjrLVkehsQiPAYoB1ybX"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketGatorActions.sol": {
			"keccak256": "0x7f1a4c0118a4e531f518d6c910a3f2ba7da9fb2860d028554d56b0d3ab8ca3e2",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://71f4d5ae3a1ed399615d00ee55dfb82157c2808ac106413fbdf9c3b737de01f1",
				"dweb:/ipfs/QmP9UEgyhbVUPWme14r7toeUVRegMi6DSS4FeXN8PDftKd"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketImmutables.sol": {
			"keccak256": "0x949878b4dcb3aba629ea368ab2cad929ad273a4a494591045a5c4a5e3ec16306",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://4a4f1aeafe93830a60681f9b81643e87594cb6dffe2c265cd6354e301a56d435",
				"dweb:/ipfs/QmUsTv5Vhu9qcbn93r4LVMCYyBttvrmMYaYcbsyTi3Zspw"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketManagerActions.sol": {
			"keccak256": "0x23d3a72cd2582dfc3f5e7b967372de3af3f23bdb038eb52791606fa244a18edf",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://560164d96d3f7d97907e3f33d1267bb9b8ba653f22a1ba4c09f3b9f38acd6466",
				"dweb:/ipfs/QmVJPi28JpXVXRygz6chvq8V9truAkqdL3GGvKMwgiefXY"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketSTGoodsCreatorActions.sol": {
			"keccak256": "0xbe21137bc8a69f5a0698ad16bfc678523c3b07b24e02437c83a2684eefc417be",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://394aaad70b367b7045c973b8839066f1fde9046d0ff8cc53ecc569979d9844f1",
				"dweb:/ipfs/QmPnaFLNNp16XzsyAQBHM7svcnTsqKKpXaKdzSfZML3xEt"
			]
		},
		"Contracts/interfaces/market/IMoonV1MarketState.sol": {
			"keccak256": "0xd0dc12296560519db198c034de5606d809f23fe48d3287ba1a70af17078097a4",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ef063f228b468ebffa0ddf4b077995af7eaafa0977ea27c9e1f895b60cabca38",
				"dweb:/ipfs/QmUFdVkRMAdxuvC2AYFrapL64y2KYmtRs4ywq6bRwzUZEi"
			]
		},
		"Contracts/libraries/LBitMath.sol": {
			"keccak256": "0x5d5109decb94122e6fcef6f27fff880ccd75208fa3045e86141d8279e96310b9",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://86b8ea87c77d72d82069df4303b42f58e9ac148d822b77ad28ee09a41a6a3a0a",
				"dweb:/ipfs/QmRiR2kRVoasNS7ZpbvdiU8VDiDJzM3XDEm9texs9WvvV7"
			]
		},
		"Contracts/libraries/LFixedPoint128.sol": {
			"keccak256": "0xc7e80dc41f28887d0d915a75c0b2783ae659e5384dd1a3ed1251a42e058d8835",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://2df62bf1d9d4349236fd0bc7a96b3a3be95f4c049603e4a20c8473cca9402b4d",
				"dweb:/ipfs/QmVR5dmMkoypmhaBeBj8cGegHpJycbofUDg59dHm42i9MT"
			]
		},
		"Contracts/libraries/LFixedPoint96.sol": {
			"keccak256": "0xb2bd8d956c89ce45663663441ec4837281b519f62feff3909c53361fc5ed0d66",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://351d282bb844d8f01b4ad55bbf4548f4bbf6ce8de74d2ad2a50659e099dc6db6",
				"dweb:/ipfs/QmWPN3sw8pCws7JeKYFpYmPPiMbByVoQFDHUoPtDWRHV8P"
			]
		},
		"Contracts/libraries/LFullMath.sol": {
			"keccak256": "0x7c76b0257a92546c1be2be38eed6f1922b319ac89401e4f62fb43a5f988b25e1",
			"license": "MIT",
			"urls": [
				"bzz-raw://67a3c87d2ed61ecc0d6b3def93f1616ad6dd59441ddf9bf92d9e9003f69f41f4",
				"dweb:/ipfs/QmfCeAhbNrUuLo689BRYJiitdE9HCp85QbxC6EQuM7Nj8d"
			]
		},
		"Contracts/libraries/LInvestionMath.sol": {
			"keccak256": "0x22de397a5a761562a16ab8f2d99afdaafd2cae44d08dc587d971fa541f9a7387",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://7c9da60fc87ccd029fcab8acee52b5df6d1a556acc5fce10d5e9c69c441a186e",
				"dweb:/ipfs/QmduRPuvHg7xbYxH5XbxX6tv89yiT99K61PfeYkCjCKVQj"
			]
		},
		"Contracts/libraries/LLowGasSafeMath.sol": {
			"keccak256": "0x5bf25f61cb866e25b26d72affc4bd247737f9b6d1f7f8b93dbd1a7b5a7b8baf1",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://498eb3a3f7e16e24e5c6148763187519c9a6d819a1029affa8667e4278e3c116",
				"dweb:/ipfs/Qmaxs6EzJZMFRK9CbPA2vNDYHJNdxMLkgPXhjyGwjQ6Dj7"
			]
		},
		"Contracts/libraries/LPriceLog.sol": {
			"keccak256": "0xb6a7a915c8f9d4d9bb9df93ef28020f7ff4488c437e0b14a230c34d91c59988a",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://d22e63f9a1999ece9304f846a77852de770a412e61a7920311731312fa9a7a71",
				"dweb:/ipfs/QmVogbgpfKhsneizme6ZbZHs84eV1tkoC7yw2DB9JQpQHf"
			]
		},
		"Contracts/libraries/LProfitShares.sol": {
			"keccak256": "0x99649085faf6e49c76506927ae3e225b7f73f1f3a5fa5ad2e8aac77824c1cf2b",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://4c4de3f3a397ebca7a4656c53292cf49cdddbfd908858a2cd4070654c6e1b481",
				"dweb:/ipfs/QmWVYMxuhVomPwk92oSBb2tuAhxG14MKPtETigqHvxyvaS"
			]
		},
		"Contracts/libraries/LProof.sol": {
			"keccak256": "0x2dbfbe8160058f211c8a205af7a40f3f11be244bfdc8425fc93f6f5510157de8",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://8d7e6ae5f49a3e70f8ffe990659562a16ccf9bbdc064884790d6c663b6e3848f",
				"dweb:/ipfs/QmZLF8qjJtGmTtbRZ2EGzRiRrPDDhizZga8YHL6wahQfFg"
			]
		},
		"Contracts/libraries/LSafeCast.sol": {
			"keccak256": "0xe9b57178e5d4bde745a45cc92eff35baa575d484108acd903174e53642fa5ca2",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://6ef51737025dc0cebd7885a4798055fd9ec140e523e66efb61153c157d23258d",
				"dweb:/ipfs/Qmcg5a2dtAcrsXJZcunCsyKxEpVLRWzM8C4p7ZuFkjkcg6"
			]
		},
		"Contracts/libraries/LSqrtPriceMath.sol": {
			"keccak256": "0xad7834db0bc421acc9f6f8e185db9848c31e9e25416b4b0c9c06774303c11f61",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://6267fe00fc68db6e55a04e6b70a0e23b1060090b6707c324995a1e3f4a289921",
				"dweb:/ipfs/QmVCLGUYgQCFhjCypTouz5Gngt3RSYM7MpvFZ16XgEgRC1"
			]
		},
		"Contracts/libraries/LSwapMath.sol": {
			"keccak256": "0xa8b6ee81bcddb18a4e2f06318a75c8f67541a7e2a553bc323d54578887ce92a8",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://d39842b2a042903650f1aad3694c37f3ed1b079fdf86cba3aa50462942977b77",
				"dweb:/ipfs/QmY2W6ZPU7LKGrPyMYRaR64meAL8Yqjcf8geB5qumP5kJ6"
			]
		},
		"Contracts/libraries/LUnit.sol": {
			"keccak256": "0xf6a6de5153730b55b9bf4fa3b2c637de18bdc3949fb34137fad6b450d0c1f087",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://b7b96039e2fb84e68076dbb6228f89160f546b015b0bfc4255aff17000fd1ae5",
				"dweb:/ipfs/QmTPsJiD4ph5gnrc8kQQXREHJ5vJNYabqkvhM2oJaTRBtD"
			]
		},
		"Contracts/libraries/LUnitBitmap.sol": {
			"keccak256": "0x553c93d606f8e1db57029077903ce11ab0c2b3d2b5b565ad7532a00ce00928a6",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://5c960c23f29ee8cc7fa2336fafebc68e1a8e7816b120a4d4aaebef469f534569",
				"dweb:/ipfs/QmbL8rk2bRGLFsai23kQSSaZK84kemBNoou4s21rv4DRHB"
			]
		},
		"Contracts/libraries/LUnitMath.sol": {
			"keccak256": "0xf872f1ba6e1d02d361be4b101fa71c56876f388771ece29aed574d698f9d852b",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://ced438e0580f88a73ae2060b0f20451a4f4fccc12d1d9cb3deafca28ce622572",
				"dweb:/ipfs/QmWY6Xm3SrMUWUJa8uZcP68DCA4eqhtcqpECL9bXmigNiW"
			]
		},
		"Contracts/libraries/LUnsafeMath.sol": {
			"keccak256": "0xef31f30ee402bb3be2087120fe6bbb338e7443a765c99a587bb771caa4ca5ef0",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://8b04d2c2396774df0e55fe55f6b0ce111caf5081f18647ed32f2bd77bf397f3b",
				"dweb:/ipfs/QmX6vVWUb6Kk61jzxPk5Guqz1J7CTzHRLkMkUqz4V8Pcao"
			]
		},
		"Contracts/libraries/TransferHelper.sol": {
			"keccak256": "0x9e8f8868d3d76ef5d6d4cb647282d21c530b5b73ae84ac3302b9fd7fd2a6f6a5",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://6a10b535ca978c9cdbc48fce26e69f67f02935093be7758fbd3357757e8abc41",
				"dweb:/ipfs/QmRE1K6o4EjZuxq6XeD3U81udAo6WEqAvXZaMPyAko3c74"
			]
		},
		"Contracts/libraries/base/LCoin.sol": {
			"keccak256": "0x50df80f333abf9be9cc7b810a6871ec1f72c4804c71bd7b996c8435b30ae0c78",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://3443b81681f1063b0d23b77229634ddf89f6fecc414ef13ae436755e55bed6fc",
				"dweb:/ipfs/QmbREhzqoB7u2bpjgpmAQvbWJm1Fky36s1fiPyGbLvZe5U"
			]
		},
		"Contracts/libraries/base/LCustomer.sol": {
			"keccak256": "0x6acb4a762f349ab39bd48ff34c150b55f55aabc4826379838391749136f3aee9",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://58552a104e1a046883cf116fe6748600caf7c8ebe341f82a38aa6fbfb09355cb",
				"dweb:/ipfs/QmQxUAK9fzefN6afoJ2CGyRWtETz1TEcZoJhDFCYJ3WY4V"
			]
		},
		"Contracts/libraries/base/LGate.sol": {
			"keccak256": "0xdbbcc3e545cc8d7d8eebe4b1dbaccee4d2adbce4785cb7ac5f4712093c72db52",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://1d7251ca8ee12ad7009fe9f280aa8be028502f51e7465fe5314b85b9a2815991",
				"dweb:/ipfs/QmRQ5Z78r3qDKhBbRbDs8d4ThNk5fLN5S5g6tosHwa6jdo"
			]
		},
		"Contracts/libraries/base/LSTGoods.sol": {
			"keccak256": "0x56d2508386646bab703a2f23fb5f36809fb239c2f58de6e2f5ba0ecc7afe2e41",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://35f7eece0bd73ca744ca4d4ed4fac2af6327c1c8d0f20ddfc173b7f37ccc5122",
				"dweb:/ipfs/QmcNroRfaKt47u1GtEvCXzXbSoj8aTBVhsYvPK4a4LoRvD"
			]
		},
		"Contracts/libraries/base/LShop.sol": {
			"keccak256": "0xb8f7b47345b022ecbd97491b79385ee69c226a62c832048df9ad74c6e4132102",
			"license": "GPL-2.0-or-later",
			"urls": [
				"bzz-raw://a821cb2570143bb2c30910d7949ddb1846be13451024c341ea8a59512609d202",
				"dweb:/ipfs/QmQg5uxtJaYg4JMVaQZRugK2m92t9fCcrPcXHbx1sqkJVS"
			]
		}
	},
	"version": 1
}